clear;

///////////////////////////////////////////////////////////////
////// Computing Example 2.6 (PreAdd) of the paper. 
////// Sumin Leem, 2024
///////////////////////////////////////////////////////////////
load "Ex_2_4.mag";

E2:=7*P3;

r2 := Floor((Degree(E2)-(g-1)-1)/b);
D2:=E2-r2*BB; // D2 is P4

// D:=D1+D2;
n:=Degree(f);

//Precomoputed BD2
BD2:=[ 1, (3*t*theta^2+(4*t^3+2*t^2+3*t+3)*theta+4*t^4)/(t^4+3),
(theta^2+(3*t^3+3*t^2+4*t+1)*theta+3*t^3)/(t^4+3) ];
rhs := -1*(Degree(D1)+Degree(D2)-(g-1)-n); // (-1)*right hand side of the equality in Step 6 of PreAdd
"BD2: ", BD2;

IDinf:=1*OF_inf;  //I_{D,inf} is trivial because I_{D1,inf} and I_{D2,inf} are trivial
BinfF:=Basis(IDinf);
M2:=Matrix(BaseField(F), Degree(F), &cat[Eltseq(i): i in BinfF]);
M2_inv:=M2^(-1);

B:=[BD2[1]*BD1[i]: i in [1..#BD1]]; //Setting up B in Step 2 of PreAdd


//Reduction algorihtm (J. Bauch wrote this part of the code and S.Leem only modified it to the example)
// Note that we only present reduction algorithm code once here for illustrative purposes. For other examples, we use other Magma intrinsics.
// Since Magma intrinsics work differently, the example may not show the same basis in the paper.
Bfin:=[[Eltseq(B[i])[j]: j in [1..3]]: i in [1..#B]];
K:=BaseField(F);
M1:=Matrix(K, Degree(f), &cat[Eltseq(i): i in Bfin]);

T:=M1*M2_inv;T;

for i in [1..#BD1] do
    for j in [2..#BD2] do
        elttemp:=BD1[i]*BD2[j];
        Btemp:=B cat [elttemp];
        "Computing BD1[i]*BD2[j] for i= ", i, "and j=", j;
        newrow:= Matrix(3,  Eltseq(elttemp));
        "new row is :", newrow;
        T:=VerticalJoin(T, newrow);

/// Reduction Algorithm 
        lc := LCM([Denominator(i):i in Eltseq(T)]);
        k:=BaseRing(K);kt<t>:=PolynomialRing(k);
        n := Ncols(T); m := Rank(T);
        m_rank := m;
        T := ChangeRing(lc*T,kt);
        T_ini := T;
        s:=1;

        VectorNorm:=[Maximum([Degree(j):j in i]):i in RowSequence(T)];
        p := [];
        Sort(~VectorNorm,~p);    
        T := Matrix([T[i]:i in Eltseq(p)]);
        run := 0;
        while s lt m_rank do
	          M:=ZeroMatrix(k,m,n);
	          for i in [1..m] do
        		for j in [1..n] do
	          		 if not T[i,j] eq 0 and Degree(T[i,j]) eq VectorNorm[i] then			
	              			M[i,j]:=LeadingCoefficient(T[i,j]);			 	
            			end if; 		 		
         		end for;
	          end for;
	          Mprime,P:=EchelonForm(M);
	          s:=Rank(Mprime);

    	    if s lt m then
    	        Su:=SubmatrixRange(P,s+1,1,m,m);
	            P:=ReverseColumns(EchelonForm(ReverseColumns(Su)));
	            for j in [1..m-s] do
	    	         tmp:=exists(u){  y : y in  [m..1 by -1] | not P[j,y] eq 0 }; 
		             for i in [1..u-1] do
	                   if not P[j,i] eq 0 then								
		                      AddRow(~T,P[j,i]/P[j,u]*t^(VectorNorm[u]-VectorNorm[i]),i,u);
	                   end if;
		             end for;
		             VectorNorm[u]:=Maximum([Degree(l):l in ElementToSequence(T[u])]);
	            end for;
	            p:=[];
	            Sort(~VectorNorm,~p);
	            T:=Matrix([T[i]:i in Eltseq(p)]);
	            m_rank := Rank(T);
	        end if;
        end while;

        tmp := Rows(T);
        Sort(~tmp,~p);
        T := Matrix(Reverse(tmp)); 
        tmp := [i-Degree(lc):i in VectorNorm]; tmp:=[tmp[i]: i in [1..m_rank]];
        T := Matrix([T[i]:i in [1..n]]);
        T:=(1/K!lc)*ChangeRing(Submatrix(T,1,1,m_rank,n),K);

        if &+ tmp eq rhs then
            ///Print PreAdd basis that satisfies the equality in Step 6 of PreAdd
            "======Ex. 2.6";
            "PreAdd basis :", T;
            break i; break j;
        end if;
    end for;
end for;
